{"version":3,"sources":["ByteArrayParsers/IByteArrayParser.ts","ByteStream.ts","JsDicomParser.ts","ByteArrayParsers/LittleEndianByteArrayParser.ts"],"names":["ByteStream","ByteStream.constructor","ByteStream.seek","ByteStream.readFixedString","JsDicomParser","JsDicomParser.constructor","JsDicomParser.parse","JsDicomParser._readPart10Header","JsDicomParser._readDicomPrefix","LittleEndianByteArrayParser","LittleEndianByteArrayParser.constructor","LittleEndianByteArrayParser.ReadFixedString"],"mappings":"AAEC;;ACFD,iDAAiD;AACjD,+DAA+D;AAE/D,IAAM,UAAU;IAMZA,SANEA,UAAUA,CAMAA,SAAmBA,EAAEA,eAAiCA,EAAEA,QAAgBA;QAChFC,EAAEA,CAAAA,CAACA,SAASA,KAAKA,SAASA,CAACA,CAC3BA,CAACA;YACGA,MAAMA,oDAAoDA,CAACA;QAC/DA,CAACA;QACDA,EAAEA,CAAAA,CAACA,CAACA,SAASA,YAAYA,UAAUA,CAACA,KAAKA,KAAKA,CAACA,CAACA,CAACA;YAC7CA,MAAMA,wDAAwDA,CAACA;QACnEA,CAACA;QACDA,EAAEA,CAAAA,CAACA,QAAQA,GAAGA,CAACA,CAACA,CAChBA,CAACA;YACGA,MAAMA,4CAA4CA,CAACA;QACvDA,CAACA;QACDA,EAAEA,CAAAA,CAACA,QAAQA,IAAIA,SAASA,CAACA,MAAMA,CAACA,CAChCA,CAACA;YACGA,MAAMA,uEAAuEA,CAACA;QAElFA,CAACA;QACDA,EAAEA,CAAAA,CAACA,eAAeA,KAAKA,SAASA,CAACA,CACjCA,CAACA;YACGA,MAAMA,0DAA0DA,CAACA;QACrEA,CAACA;QAEDA,IAAIA,CAACA,SAASA,GAAGA,SAASA,CAACA;QAC3BA,IAAIA,CAACA,QAAQA,GAAGA,QAAQA,GAAGA,QAAQA,GAAGA,CAACA,CAACA;QACxCA,IAAIA,CAACA,eAAeA,GAAGA,eAAeA,CAACA;IAC3CA,CAACA;IAEDD,yBAAIA,GAAJA,UAAKA,MAAcA;QACfE,EAAEA,CAAAA,CAACA,IAAIA,CAACA,QAAQA,GAAGA,MAAMA,GAAGA,CAACA,CAACA,CAC9BA,CAACA;YACGA,MAAMA,yCAAyCA,CAACA;QACpDA,CAACA;QAEDA,IAAIA,CAACA,QAAQA,IAAIA,MAAMA,CAACA;IAC5BA,CAACA;IAEDF,oCAAeA,GAAfA,UAAgBA,MAAcA;QAC1BG,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,eAAeA,CAACA,eAAeA,CAACA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,QAAQA,EAAEA,MAAMA,CAACA,CAACA;QACzFA,IAAIA,CAACA,QAAQA,IAAIA,MAAMA,CAACA;QAExBA,MAAMA,CAACA,MAAMA,CAACA;IAClBA,CAACA;IACLH,iBAACA;AAADA,CAhDA,AAgDCA,IAAA;;ACnDD,iDAAiD;AACjD,+DAA+D;AAE/D,IAAM,aAAa;IAAnBI,SAAMA,aAAaA;IAanBC,CAACA;IAZGD,6BAAKA,GAALA,UAAMA,SAAmBA,EAAEA,MAAaA;IAExCE,CAACA;IAEDF,6GAA6GA;IACrGA,yCAAiBA,GAAzBA;IAEAG,CAACA;IAEOH,wCAAgBA,GAAxBA;IAEAI,CAACA;IACLJ,oBAACA;AAADA,CAbA,AAaCA,IAAA;;AChBD,oDAAoD;AACpD,8CAA8C;AAE9C,IAAM,2BAA2B;IAAjCK,SAAMA,2BAA2BA;IA4BjCC,CAACA;IA1BGD,qDAAeA,GAAfA,UAAgBA,SAAmBA,EAAEA,QAAgBA,EAAEA,MAAcA;QACjEE,EAAEA,CAAAA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CACdA,CAACA;YACGA,MAAMA,2EAA2EA,CAACA;QACtFA,CAACA;QAEDA,EAAEA,CAAAA,CAACA,QAAQA,GAAGA,MAAMA,GAAGA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;YACtCA,MAAMA,uFAAuFA,CAACA;QAClGA,CAACA;QAEDA,IAAIA,MAAMA,GAAUA,EAAEA,CAACA;QAEvBA,GAAGA,CAAAA,CAACA,GAAGA,CAACA,CAACA,GAAUA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,EAAEA,CAACA,EAAEA,EACrCA,CAACA;YACGA,IAAIA,IAAIA,GAAGA,SAASA,CAACA,QAAQA,GAAGA,CAACA,CAACA,CAACA;YAEnCA,EAAEA,CAAAA,CAACA,IAAIA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACZA,QAAQA,IAAKA,MAAMA,CAACA;gBACpBA,MAAMA,CAACA,MAAMA,CAACA;YAClBA,CAACA;YAEDA,MAAMA,IAAIA,MAAMA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA;QACxCA,CAACA;QAEDA,MAAMA,CAACA,MAAMA,CAACA;IAClBA,CAACA;IACLF,kCAACA;AAADA,CA5BA,AA4BCA,IAAA","file":"jsDicomParser.js","sourcesContent":["interface IByteArrayParser {    \r\n    ReadFixedString(byteArray: number[], position: number, length: number): string;\r\n}","/// <reference path=\"./typing/browserify.d.ts\" />\r\n/// <reference path=\"./ByteArrayParsers/IByteArrayParser.ts\" />\r\n\r\nclass ByteStream {\r\n\r\n    position: number;\r\n    byteArray: number[];\r\n    byteArrayParser: IByteArrayParser;\r\n\r\n    constructor(byteArray: number[], byteArrayParser: IByteArrayParser, position: number) {\r\n        if(byteArray === undefined)\r\n        {\r\n            throw \"ByteStream: missing required parameter 'byteArray'\";\r\n        }\r\n        if((byteArray instanceof Uint8Array) === false) {\r\n            throw 'ByteStream: byteArray should be instance of Uint8Array';\r\n        }\r\n        if(position < 0)\r\n        {\r\n            throw \"ByteStream: position cannot be less than 0\";\r\n        }\r\n        if(position >= byteArray.length)\r\n        {\r\n            throw \"ByteStream: position cannot be more than or equal to byteArray.length\";\r\n\r\n        }\r\n        if(byteArrayParser === undefined)\r\n        {\r\n            throw \"ByteStream: missing required parameter 'byteArrayParser'\";\r\n        }        \r\n\r\n        this.byteArray = byteArray;\r\n        this.position = position ? position : 0;\r\n        this.byteArrayParser = byteArrayParser;\r\n    }\r\n\r\n    seek(offset: number) {\r\n        if(this.position + offset < 0)\r\n        {\r\n            throw \"ByteStream: cannot seek to position < 0\";\r\n        }\r\n\r\n        this.position += offset;\r\n    }\r\n\r\n    readFixedString(length: number) {\r\n        var result = this.byteArrayParser.ReadFixedString(this.byteArray, this.position, length);\r\n        this.position += length;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n","/// <reference path=\"./typing/browserify.d.ts\" />\r\n/// <reference path=\"./ByteArrayParsers/IByteArrayParser.ts\" />\r\n\r\nclass JsDicomParser {\r\n    parse(byteArray: number[], option: any[]) {\r\n\r\n    }    \r\n\r\n    // read dicom header according to PS3.10 (http://medical.nema.org/dicom/2013/output/chtml/part10/PS3.10.html)\r\n    private _readPart10Header() {\r\n\r\n    }\r\n\r\n    private _readDicomPrefix() {\r\n\r\n    }\r\n}","/// <reference path=\"./../typing/browserify.d.ts\" />\r\n/// <reference path=\"./IByteArrayParser.ts\" />\r\n\r\nclass LittleEndianByteArrayParser implements IByteArrayParser {\r\n\r\n    ReadFixedString(byteArray: number[], position: number, length: number):string {\r\n        if(length < 0)\r\n        {\r\n            throw 'LittleEndianByteArrayParser.ReadFixedString: length cannot be less than 0';\r\n        }\r\n\r\n        if(position + length > byteArray.length) {\r\n            throw 'LittleEndianByteArrayParser.ReadFixedString: length cannot be more than buffer.length';\r\n        }\r\n\r\n        var result:string = \"\";\r\n\r\n        for(var i:number = 0; i < length; i++)\r\n        {\r\n            var byte = byteArray[position + i];\r\n\r\n            if(byte === 0) {\r\n                position +=  length;\r\n                return result;\r\n            }\r\n\r\n            result += String.fromCharCode(byte);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"],"sourceRoot":"/source/"}